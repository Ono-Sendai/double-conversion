Index: bignum.cc
===================================================================
--- bignum.cc	(revision 16108)
+++ bignum.cc	(working copy)
@@ -146,7 +146,7 @@
     }
   }
   if (tmp > 0) {
-    RawBigit(used_bigits_++) = tmp;
+    RawBigit(used_bigits_++) = (Bignum::Chunk)tmp;
   }
   Clamp();
 }
@@ -203,7 +203,7 @@
     carry = sum >> kBigitSize;
     ++bigit_pos;
   }
-  used_bigits_ = (std::max)(bigit_pos, static_cast<int>(used_bigits_));
+  used_bigits_ = (int16_t)(std::max)(bigit_pos, static_cast<int>(used_bigits_));
   DOUBLE_CONVERSION_ASSERT(IsClamped());
 }
 
@@ -239,7 +239,7 @@
   if (used_bigits_ == 0) {
     return;
   }
-  exponent_ += (shift_amount / kBigitSize);
+  exponent_ += (int16_t)(shift_amount / kBigitSize);
   const int local_shift = shift_amount % kBigitSize;
   EnsureCapacity(used_bigits_ + 1);
   BigitsShiftLeft(local_shift);
@@ -417,7 +417,7 @@
   DOUBLE_CONVERSION_ASSERT(accumulator == 0);
 
   // Don't forget to update the used_digits and the exponent.
-  used_bigits_ = product_length;
+  used_bigits_ = (int16_t)product_length;
   exponent_ *= 2;
   Clamp();
 }
@@ -738,8 +738,8 @@
     for (int i = 0; i < zero_bigits; ++i) {
       RawBigit(i) = 0;
     }
-    used_bigits_ += zero_bigits;
-    exponent_ -= zero_bigits;
+    used_bigits_ += (int16_t)zero_bigits;
+    exponent_ -= (int16_t)zero_bigits;
 
     DOUBLE_CONVERSION_ASSERT(used_bigits_ >= 0);
     DOUBLE_CONVERSION_ASSERT(exponent_ >= 0);
